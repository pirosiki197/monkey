// Code generated by "stringer -type TokenType -linecomment token.go"; DO NOT EDIT.

package token

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[ILLEGAL-1]
	_ = x[EOF-2]
	_ = x[IDENT-3]
	_ = x[INT-4]
	_ = x[STRING-5]
	_ = x[ASSIGN-6]
	_ = x[PLUS-7]
	_ = x[MINUS-8]
	_ = x[BANG-9]
	_ = x[ASTERISK-10]
	_ = x[SLASH-11]
	_ = x[EQ-12]
	_ = x[NOT_EQ-13]
	_ = x[LT-14]
	_ = x[GT-15]
	_ = x[LT_EQ-16]
	_ = x[GT_EQ-17]
	_ = x[COMMA-18]
	_ = x[SEMICOLON-19]
	_ = x[LPAREN-20]
	_ = x[RPAREN-21]
	_ = x[LBRACE-22]
	_ = x[RBRACE-23]
	_ = x[FUNCTION-24]
	_ = x[LET-25]
	_ = x[TRUE-26]
	_ = x[FALSE-27]
	_ = x[IF-28]
	_ = x[ELSE-29]
	_ = x[RETURN-30]
}

const _TokenType_name = "ILLEGALEOFIDENTINTSTRING=+-!*/==!=<><=>=,;(){}FUNCTIONLETTRUEFALSEIFELSERETURN"

var _TokenType_index = [...]uint8{0, 7, 10, 15, 18, 24, 25, 26, 27, 28, 29, 30, 32, 34, 35, 36, 38, 40, 41, 42, 43, 44, 45, 46, 54, 57, 61, 66, 68, 72, 78}

func (i TokenType) String() string {
	i -= 1
	if i < 0 || i >= TokenType(len(_TokenType_index)-1) {
		return "TokenType(" + strconv.FormatInt(int64(i+1), 10) + ")"
	}
	return _TokenType_name[_TokenType_index[i]:_TokenType_index[i+1]]
}
